apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'csdnkey'
            keyPassword 'csdnkey'
            storeFile file('key/csdn_release.jks')
            storePassword 'csdn2015key'
        }
        config_temp {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "com.jacksen.csdn"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources true //移除无效的resource文件，必须允许ProGuard才能生效
            zipAlignEnabled true
            buildConfigField "boolean", "APP_TYPE", "true"
            manifestPlaceholders = [APP_NAME: "@string/app_name_release"]
            signingConfig signingConfigs.config
        }
        debug {
            buildConfigField "boolean", "APP_TYPE", "false"
//            manifestPlaceholders = [APP_NAME: "@string/app_name_debug"]
            applicationIdSuffix 'debug'
        }
    }
    productFlavors {
        flavor_1 {
            minSdkVersion 15
            signingConfig signingConfigs.config_temp
            targetSdkVersion 23
            manifestPlaceholders = [APP_NAME: "@string/app_name_flavor1"]
        }
        flavor_2 {
            minSdkVersion 17
            applicationId 'com.jacksen.flavor2'
            signingConfig signingConfigs.config
            targetSdkVersion 23
            versionCode 2
            versionName '1.2'
            manifestPlaceholders = [APP_NAME: "@string/app_name_flavor2"]
        }
    }

    lintOptions {
        abortOnError false
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [APP_NAME: "flavor"]
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}.apk")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
            }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
}
